def create_graph(p_node,s):

    completed_nodes = []
    uncomplete_nodes = []
    global g

    g = Graph()
    
    p = p_node
    
    temp = s.pAll[p_node].follower
    
    g.add_node(id=str(p_node),radius = 5,stroke = color(1, 0, 0.25, 1),text = color(1))

##    print "-"*50
##    print "parent_node ",p_node
##    print "parent follower ",temp
    
    for i in range(len(temp)):#100
        g.add_node(id=str(temp[i]), 
            radius = 5,
            stroke = color(1), 
              text = color(1))

    completed_nodes.append(p_node)
    
    # Random edges.
    p_links = s.pAll[p_node].follower
    for i in range(len(p_links)):
        node1 = str(p_node)#choice(g.nodes)
        node2 = str(p_links[i])#choice(g.nodes)
        uncomplete_nodes.append(p_links[i])
        g.add_edge(node1, node2,
                   length = 500.0,

                   weight = random(),
                   stroke = color(1, 0, 0.25, 1))

##    print "-"*50
##    print "Completed_Nodes  ",completed_nodes
##    print "Uncomplete_Nodes ",uncomplete_nodes

    while len(uncomplete_nodes) <> 0:
        node1 = uncomplete_nodes[0]
        follower_list = s.pAll[node1].follower

##        print "node1 which became parent ",node1
        
        for i in follower_list:
            if i not in completed_nodes:
                
                node_1 = str(node1)
                node2 = str(i)
                print node_1,"--->",i
                uncomplete_nodes.append(i)
                g.add_node(id=str(i),radius = 5,stroke = color(1, 0, 0.25, 1),text = color(1))
                g.add_edge(node_1,node2,
                           length = 50.0,
                           stroke = color(1),
                           weight = random())

        completed_nodes.append(node1)                
        del uncomplete_nodes[0]

##        print "Completed_Nodes  ",completed_nodes
##        print "Uncomplete_Nodes ",uncomplete_nodes